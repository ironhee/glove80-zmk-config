#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include "./position.h"

// layers
#define DEFT 0
#define NUMB 1
#define SYMB 2
#define NAVI 3
#define FUNC 4
#define MAGI 5

// Helpers
#define WRAP_QUOTE(X) #X
#define IRONHEE_MACRO(NAME, ...) \
    NAME: NAME { \
        label = WRAP_QUOTE(MACRO_ ## NAME); \
        compatible = "zmk,behavior-macro"; \
        #binding-cells = <0>; \
        wait-ms = <1>; \
        tap-ms = <1>; \
        bindings = __VA_ARGS__; \
    };
#define IRONHEE_MORP_SHIFT(NAME, BINDING_BASE, BINDING_MORP) \
    NAME: NAME { \
        compatible = "zmk,behavior-mod-morph"; \
        label = WRAP_QUOTE(MORP_SHIFT_ ## NAME); \
        #binding-cells = <0>; \
        bindings = <BINDING_BASE>, <BINDING_MORP>; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
    };
#define IRONHEE_COMBO(NAME, KEY_POSITIONS, BINDINGS) \
    combo_ ## NAME { \
        timeout-ms = <32>; \
        key-positions = <KEY_POSITIONS>; \
        bindings = <BINDINGS>; \
    };

&sk {
    release-after-ms = <1000>;
    quick-release;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

&mt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
};

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGI_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Hold Tap
        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "left_mod_tap";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <R1_X R2_X R3_X R4_X R5_X R6_X RT_X LT_X>;
            hold-trigger-on-release;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "right_mod_tap";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <L1_X L2_X L3_X L4_X L5_X L6_X LT_X RT_X>;
            hold-trigger-on-release;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        lt_repeat: lt_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "lt_repeat";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
            bindings = <&mo>, <&key_repeat>;
        };
        // Tap Dance
        td_shift: tap_dance_shift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };
        // Morp Shift
        IRONHEE_MORP_SHIFT(m_comma, &kp COMMA, &kp QMARK)
        IRONHEE_MORP_SHIFT(m_dot,   &kp DOT,   &kp EXCL)
        IRONHEE_MORP_SHIFT(m_flsh,  &kp FSLH,  &kp BSLH)
        IRONHEE_MORP_SHIFT(m_eql,   &kp EQUAL, &kp UNDER)
    };

    macros {
        IRONHEE_MACRO(rgb_ug_status_macro, <&rgb_ug RGB_STATUS>)
        IRONHEE_MACRO(bt_0, <&out OUT_BLE>, <&bt BT_SEL 0>)
        IRONHEE_MACRO(bt_1, <&out OUT_BLE>, <&bt BT_SEL 1>)
        IRONHEE_MACRO(bt_2, <&out OUT_BLE>, <&bt BT_SEL 2>)
        IRONHEE_MACRO(bt_3, <&out OUT_BLE>, <&bt BT_SEL 3>)
    };

    combos {
        compatible = "zmk,combos";
        // Left Hand Combo
        IRONHEE_COMBO(tab,   L4_4 L4_3     , &lmt LA(LCTRL) TAB)
        IRONHEE_COMBO(bspc,       L4_3 L4_2, &lmt LS(LCTRL) BSPC)
        IRONHEE_COMBO(esc,   L4_4      L4_2, &lmt LA(LSHFT) ESC)
        // Right Hand Combos
        IRONHEE_COMBO(lang,  R4_2 R4_3     , &rmt LS(LCTRL) LANG1)
        IRONHEE_COMBO(caps,       R4_3 R4_4, &rmt LA(LCTRL) CAPS)
        // Both Hand Combos
        IRONHEE_COMBO(func,  LT_4      RT_4, &to FUNC)
    };

    keymap {
        compatible = "zmk,keymap";

        deft_layer {
            bindings = <
            &kp F1        &kp F2      &kp F3      &kp F4       &kp F5                                               /* */                                           &kp F6       &kp F7       &kp F8      &kp F9         &kp F10
            &kp F11       &kp N1      &kp N2      &kp N3       &kp N4       &kp N5                                  /* */                                    &kp N6 &kp N7       &kp N8       &kp N9      &kp N0         &kp F12
            &kp ESC       &kp Q       &kp W       &kp E        &kp R        &kp T                                   /* */                                    &kp Y  &kp U        &kp I        &kp O       &kp P          &kp DEL
            &kp BSPC      &lmt LCMD A &lmt LALT S &lmt LCTRL D &lmt LSHFT F &kp G                                   /* */                                    &kp H  &rmt LSHFT J &rmt LCTRL K &rmt LALT L &rmt LCMD APOS &kp SEMI
            &kp TAB       &kp Z       &kp X       &kp C        &lt SYMB V   &kp B &td_shift      &sk LCTRL &sk LALT /* */ &sk LALT &sk LCTRL   &td_shift     &kp N  &lt SYMB M   &m_comma     &m_dot      &m_flsh        &m_eql
            &magic MAGI 0 &kp LEFT    &kp UP      &kp DOWN     &kp RIGHT          &lt NAVI SPACE &kp RET   &sk LCMD /* */ &sk LCMD &key_repeat &lt NUMB BSPC        &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE  &kp C_PP       &magic MAGI 0
            >;
        };

        navi_layer {
            bindings = <
            &trans &trans   &trans           &trans      &trans                                          /* */                               &trans       &trans   &trans        &trans  &trans
            &trans &trans   &trans           &trans      &trans            &trans                        /* */                      &trans   &trans       &trans   &trans        &trans  &trans
            &trans &trans   &trans           &trans      &trans            &trans                        /* */                      &trans   &kp LC(LEFT) &kp UP   &kp LC(RIGHT) &trans  &trans
            &trans &kp LCMD &kp LALT         &kp LCTRL   &kp LSHFT         &trans                        /* */                      &kp HOME &kp LEFT     &kp DOWN &kp RIGHT     &kp END &trans
            &trans &trans   &kp LG(LC(LEFT)) &kp LG(TAB) &kp LG(LC(RIGHT)) &trans &trans   &trans &trans /* */ &trans &trans &trans &trans   &trans       &trans   &trans        &trans  &trans
            &trans &trans   &kp LA(LEFT)     &kp LC(F4)  &kp LA(RIGHT)            &to DEFT &trans &trans /* */ &trans &trans &trans          &trans       &trans   &trans        &trans  &trans
            >;
        };

        numb_layer {
            bindings = <
            &trans &trans &trans &trans &trans                                /* */                               &trans    &trans    &trans   &trans   &trans
            &trans &trans &trans &trans &trans &trans                         /* */                        &trans &trans    &trans    &trans   &trans   &trans
            &trans &kp N0 &kp N7 &kp N8 &kp N9 &kp CARET                      /* */                        &trans &trans    &trans    &trans   &trans   &trans
            &trans &kp N0 &kp N4 &kp N5 &kp N6 &kp PRCNT                      /* */                        &trans &kp LSHFT &kp LCTRL &kp LALT &kp LCMD &trans
            &trans &kp N0 &kp N1 &kp N2 &kp N3 &kp COLON &trans &trans &trans /* */ &trans &trans &trans   &trans &trans    &trans    &trans   &trans   &trans
            &trans &trans &trans &trans &trans           &trans &trans &trans /* */ &trans &trans &to DEFT        &trans    &trans    &trans   &trans   &trans
            >;
        };

        func_layer {
            bindings = <
            &trans &trans  &trans &trans &trans                                        /* */                               &trans    &trans    &trans   &trans   &trans
            &trans &trans  &trans &trans &trans &trans                                 /* */                        &trans &trans    &trans    &trans   &trans   &trans
            &trans &kp F12 &kp F7 &kp F8 &kp F9 &kp PSCRN                              /* */                        &trans &trans    &trans    &trans   &trans   &trans
            &trans &kp F11 &kp F4 &kp F5 &kp F6 &kp SLCK                               /* */                        &trans &kp LSHFT &kp LCTRL &kp LALT &kp LCMD &trans
            &trans &kp F10 &kp F1 &kp F2 &kp F3 &kp PAUSE_BREAK &trans   &trans &trans /* */ &trans &trans &trans   &trans &trans    &trans    &trans   &trans   &trans
            &trans &trans  &trans &trans &trans                 &to NAVI &trans &trans /* */ &trans &trans &to NUMB       &trans    &trans    &trans   &trans   &trans
            >;
        };

        symb_layer {
            bindings = <
            &trans &trans    &trans    &trans   &trans                                   /* */                                &trans    &trans   &trans   &trans    &trans
            &trans &trans    &trans    &trans   &trans    &trans                         /* */                      &trans    &trans    &trans   &trans   &trans    &trans
            &trans &trans    &kp LT    &kp GT   &kp AMPS  &kp CARET                      /* */                      &kp DLLR  &kp GRAVE &kp LBKT &kp RBKT &trans    &trans
            &trans &kp EXCL  &kp MINUS &kp PLUS &kp EQUAL &kp PRCNT                      /* */                      &kp AT    &kp UNDER &kp LPAR &kp RPAR &kp SEMI  &trans
            &trans &kp QMARK &kp FSLH  &kp STAR &kp PIPE  &kp COLON &trans &trans &trans /* */ &trans &trans &trans &kp HASH  &kp TILDE &kp LBRC &kp RBRC &kp COLON &trans
            &trans &trans    &trans    &trans   &trans              &trans &trans &trans /* */ &trans &trans &trans           &trans    &trans   &trans   &trans    &trans
            >;
        };

        magi_layer {
            bindings = <
            &bt BT_CLR  &none           &none           &none           &none                                                    /* */                         &none &none &none &none &bt BT_CLR_ALL
            &none       &none           &none           &none           &none           &none                                    /* */                   &none &none &none &none &none &none
            &none       &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                          /* */                   &none &none &none &none &none &none
            &bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                          /* */                   &none &none &none &none &none &bootloader
            &sys_reset  &none           &none           &none           &none           &none           &bt_2 &bt_3 &none        /* */ &none &none &none &none &none &none &none &none &sys_reset
            &none       &none           &none           &none           &none                           &bt_0 &bt_1 &out OUT_USB /* */ &none &none &none       &none &none &none &none &none
            >;
        };
    };
};