#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/mouse.h>
#include "./position.h"


// layers
#define DEFT 0
#define NUMB 1
#define MOUS 1
#define MAGI 2

// Helpers
#define WRAP_QUOTE(X) #X
#define IRONHEE_MACRO(NAME, ...) \
    NAME: NAME { \
        label = WRAP_QUOTE(MACRO_ ## NAME); \
        compatible = "zmk,behavior-macro"; \
        #binding-cells = <0>; \
        wait-ms = <1>; \
        tap-ms = <1>; \
        bindings = __VA_ARGS__; \
    };
#define IRONHEE_MORP_SHIFT(NAME, BINDING_BASE, BINDING_MORP) \
    NAME: NAME { \
        compatible = "zmk,behavior-mod-morph"; \
        label = WRAP_QUOTE(MORP_SHIFT_ ## NAME); \
        #binding-cells = <0>; \
        bindings = <BINDING_BASE>, <BINDING_MORP>; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
    };
#define IRONHEE_COMBO(NAME, KEY_POSITIONS, BINDINGS) \
    combo_ ## NAME { \
        timeout-ms = <32>; \
        key-positions = <KEY_POSITIONS>; \
        bindings = <BINDINGS>; \
    };

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGI_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Hold Tap
        lht: left_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hold_tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <R1_X R2_X R3_X R4_X R5_X R6_X RT_X LT_X>;
            hold-trigger-on-release;
        };
        rht: right_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hold_tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <L1_X L2_X L3_X L4_X L5_X L6_X LT_X RT_X>;
            hold-trigger-on-release;
        };
        tht: thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "thumb_hold_tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
        };
        // Morp Shift
        IRONHEE_MORP_SHIFT(m_comma, &kp COMMA, &kp SEMI)      // ,;
        IRONHEE_MORP_SHIFT(m_dot,   &kp DOT,   &kp COLON)     // .:
        IRONHEE_MORP_SHIFT(m_qmark, &kp QMARK, &kp EXCL)      // ?!
        IRONHEE_MORP_SHIFT(m_lpar,  &kp LPAR,  &kp LT)        // (<
        IRONHEE_MORP_SHIFT(m_rpar,  &kp RPAR,  &kp GT)        // )>
        IRONHEE_MORP_SHIFT(m_lbkt,  &kp LBKT,  &kp LBRC)      // [{
        IRONHEE_MORP_SHIFT(m_rbkt,  &kp RBKT,  &kp RBRC)      // ]}
        IRONHEE_MORP_SHIFT(m_plus,  &kp PLUS,  &kp STAR)      // +*
        IRONHEE_MORP_SHIFT(m_minus, &kp MINUS, &kp FSLH)      // -/
        IRONHEE_MORP_SHIFT(m_equal, &kp EQUAL, &kp UNDER)     // =_
        IRONHEE_MORP_SHIFT(m_pipe,  &kp PIPE,  &kp AMPS)      // |&
        IRONHEE_MORP_SHIFT(m_at,    &kp AT,    &kp PRCNT)     // @%
        IRONHEE_MORP_SHIFT(m_tilde, &kp TILDE, &kp DLLR)      // ~$
        IRONHEE_MORP_SHIFT(m_grave, &kp GRAVE, &kp CARET)     // `^
        IRONHEE_MORP_SHIFT(m_bslh,  &kp BSLH,  &kp HASH)      // \#
    };

    macros {
        IRONHEE_MACRO(rgb_ug_status_macro, <&rgb_ug RGB_STATUS>)
        IRONHEE_MACRO(bt_0, <&out OUT_BLE>, <&bt BT_SEL 0>)
        IRONHEE_MACRO(bt_1, <&out OUT_BLE>, <&bt BT_SEL 1>)
        IRONHEE_MACRO(bt_2, <&out OUT_BLE>, <&bt BT_SEL 2>)
        IRONHEE_MACRO(bt_3, <&out OUT_BLE>, <&bt BT_SEL 3>)
    };

    combos {
        compatible = "zmk,combos";
        // Left Hand Combo
        IRONHEE_COMBO(minus, L3_4 L3_3     , &m_minus)
        IRONHEE_COMBO(plus,       L3_3 L3_2, &m_plus)
        IRONHEE_COMBO(equal, L3_4      L3_2, &m_equal)
        IRONHEE_COMBO(tab,   L4_4 L4_3     , &lht LA(LCTRL) TAB)
        IRONHEE_COMBO(bspc,       L4_3 L4_2, &lht LS(LCTRL) BSPC)
        IRONHEE_COMBO(esc,   L4_4      L4_2, &lht LA(LSHFT) ESC)
        IRONHEE_COMBO(bslh,  L5_4 L5_3     , &m_bslh)
        IRONHEE_COMBO(at,         L5_3 L5_2, &m_at)
        IRONHEE_COMBO(grave, L5_4      L5_2, &m_grave)
        // Right Hand Combos
        IRONHEE_COMBO(lpar,  R3_2 R3_3     , &m_lpar)
        IRONHEE_COMBO(rpar,       R3_3 R3_4, &m_rpar)
        IRONHEE_COMBO(pipe,  R3_2      R3_4, &m_pipe)
        IRONHEE_COMBO(lang,  R4_2 R4_3     , &rht LS(LCTRL) LANG1)
        IRONHEE_COMBO(caps,       R4_3 R4_4, &rht LA(LCTRL) CAPS)
        IRONHEE_COMBO(lbkt,  R5_2 R5_3     , &m_lbkt)
        IRONHEE_COMBO(rbkt,       R5_3 R5_4, &m_rbkt)
        IRONHEE_COMBO(tilde, R5_2      R5_4, &m_tilde)
    };

    keymap {
        compatible = "zmk,keymap";

        deft_layer {
            bindings = <
            &kp N1        &kp N2      &kp N3      &kp N4       &kp N5                                                          /* */                                                &kp N6       &kp N7       &kp N8      &kp N9         &kp N0
            &kp F1        &kp F2      &kp F3      &kp F4       &kp F5       &kp F6                                             /* */                                        &kp F7  &kp F8       &kp F9       &kp F10     &kp F11        &kp F12
            &kp C_VOL_UP  &kp Q       &kp W       &kp E        &kp R        &kp T                                              /* */                                        &kp Y   &kp U        &kp I        &kp O       &kp P          &kp PSCRN
            &kp C_MUTE    &lht LCMD A &lht LALT S &lht LCTRL D &lht LSHFT F &kp G                                              /* */                                        &kp H   &rht LSHFT J &rht LCTRL K &rht LALT L &rht LCMD APOS &kp SCROLLLOCK
            &kp C_VOL_DN  &kp Z       &kp X       &kp C        &kp V        &kp B &tog MOUS         &kp MINUS        &kp GRAVE /* */ &kp BSLH &kp LBKT      &tog MOUS       &kp N   &kp M        &m_comma     &m_dot      &m_qmark       &kp PAUSE_BREAK
            &magic MAGI 0 &kp PG_UP   &kp UP      &kp DOWN     &kp PG_DN          &tht LSHFT RETURN &tht LCTRL SPACE &kp TAB   /* */ &kp ESC  &lt NUMB BSPC &tht LSHFT DEL          &kp HOME     &kp LEFT     &kp RIGHT   &kp END        &kp LCMD
            >;
        };

        numb_layer {
            bindings = <
            &trans &trans &trans &trans &trans                             /* */                             &trans    &trans    &trans   &trans   &trans
            &trans &trans &trans &trans &trans &trans                      /* */                      &trans &trans    &trans    &trans   &trans   &trans
            &trans &trans &kp N7 &kp N8 &kp N9 &trans                      /* */                      &trans &trans    &trans    &trans   &trans   &trans
            &trans &trans &kp N4 &kp N5 &kp N6 &trans                      /* */                      &trans &kp LSHFT &kp LCTRL &kp LALT &kp LCMD &trans
            &trans &kp N0 &kp N1 &kp N2 &kp N3 &trans &trans &trans &trans /* */ &trans &trans &trans &trans &trans    &trans    &trans   &trans   &trans
            &trans &trans &trans &trans &trans        &trans &trans &trans /* */ &trans &trans &trans        &trans    &trans    &trans   &trans   &trans
            >;
        };

        mous_layer {
            bindings = <
            &trans &trans   &trans   &trans   &trans                                /* */                                   &trans         &trans         &trans          &trans &trans
            &trans &trans   &trans   &trans   &trans    &trans                      /* */                            &trans &trans         &trans         &trans          &trans &trans
            &trans &trans   &trans   &trans   &trans    &trans                      /* */                            &trans &trans         &mmv MOVE_UP   &trans          &trans &trans
            &trans &kp LCMD &kp LALT &kp LCTR &kp LSHFT &trans                      /* */                            &trans &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &trans &trans
            &trans &trans   &trans   &trans   &trans    &trans &trans &trans &trans /* */ &mkp MB5 &mkp MB4 &trans   &trans &trans         &trans         &trans          &trans &trans
            &trans &trans   &trans   &trans   &trans           &trans &trans &trans /* */ &mkp MB3 &mkp MB2 &mkp MB1        &trans         &trans         &trans          &trans &trans
            >;
        };

        magi_layer {
            bindings = <
            &bt BT_CLR  &none           &none           &none           &none                                                    /* */                         &none &none &none &none &bt BT_CLR_ALL
            &none       &none           &none           &none           &none           &none                                    /* */                   &none &none &none &none &none &none
            &none       &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                          /* */                   &none &none &none &none &none &none
            &bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                          /* */                   &none &none &none &none &none &bootloader
            &sys_reset  &none           &none           &none           &none           &none           &bt_2 &bt_3 &none        /* */ &none &none &none &none &none &none &none &none &sys_reset
            &none       &none           &none           &none           &none                           &bt_0 &bt_1 &out OUT_USB /* */ &none &none &none       &none &none &none &none &none
            >;
        };
    };
};