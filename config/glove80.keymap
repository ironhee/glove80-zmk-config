#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include "./position.h"

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Hold Tap
        lht: left_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "left_hold_tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                /* POS_LH_C6R1 POS_LH_C5R1 POS_LH_C4R1 POS_LH_C3R1 POS_LH_C2R1             */                POS_RH_C2R1 POS_RH_C3R1 POS_RH_C4R1 POS_RH_C5R1 POS_RH_C6R1
                /* POS_LH_C6R2 POS_LH_C5R2 POS_LH_C4R2 POS_LH_C3R2 POS_LH_C2R2 POS_LH_C1R2 */    POS_RH_C1R2 POS_RH_C2R2 POS_RH_C3R2 POS_RH_C4R2 POS_RH_C5R2 POS_RH_C6R2
                /* POS_LH_C6R3 POS_LH_C5R3 POS_LH_C4R3 POS_LH_C3R3 POS_LH_C2R3 POS_LH_C1R3 */    POS_RH_C1R3 POS_RH_C2R3 POS_RH_C3R3 POS_RH_C4R3 POS_RH_C5R3 POS_RH_C6R3
                /* POS_LH_C6R4 POS_LH_C5R4 POS_LH_C4R4 POS_LH_C3R4 POS_LH_C2R4 POS_LH_C1R4 */    POS_RH_C1R4 POS_RH_C2R4 POS_RH_C3R4 POS_RH_C4R4 POS_RH_C5R4 POS_RH_C6R4
                /* POS_LH_C6R5 POS_LH_C5R5 POS_LH_C4R5 POS_LH_C3R5 POS_LH_C2R5 POS_LH_C1R5 */    POS_RH_C1R5 POS_RH_C2R5 POS_RH_C3R5 POS_RH_C4R5 POS_RH_C5R5 POS_RH_C6R5
                /* POS_LH_C6R6 POS_LH_C5R6 POS_LH_C4R6 POS_LH_C3R6 POS_LH_C2R6             */                POS_RH_C2R6 POS_RH_C3R6 POS_RH_C4R6 POS_RH_C5R6 POS_RH_C6R6
                                                        POS_LH_T1   POS_LH_T2   POS_LH_T3        POS_RH_T3   POS_RH_T2   POS_RH_T1
                                                        POS_LH_T4   POS_LH_T5   POS_LH_T6        POS_RH_T6   POS_RH_T5   POS_RH_T4
            >;
            hold-trigger-on-release;
        };
        rht: right_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "right_hold_tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                POS_LH_C6R1 POS_LH_C5R1 POS_LH_C4R1 POS_LH_C3R1 POS_LH_C2R1                /*             POS_RH_C2R1 POS_RH_C3R1 POS_RH_C4R1 POS_RH_C5R1 POS_RH_C6R1 */
                POS_LH_C6R2 POS_LH_C5R2 POS_LH_C4R2 POS_LH_C3R2 POS_LH_C2R2 POS_LH_C1R2    /* POS_RH_C1R2 POS_RH_C2R2 POS_RH_C3R2 POS_RH_C4R2 POS_RH_C5R2 POS_RH_C6R2 */
                POS_LH_C6R3 POS_LH_C5R3 POS_LH_C4R3 POS_LH_C3R3 POS_LH_C2R3 POS_LH_C1R3    /* POS_RH_C1R3 POS_RH_C2R3 POS_RH_C3R3 POS_RH_C4R3 POS_RH_C5R3 POS_RH_C6R3 */
                POS_LH_C6R4 POS_LH_C5R4 POS_LH_C4R4 POS_LH_C3R4 POS_LH_C2R4 POS_LH_C1R4    /* POS_RH_C1R4 POS_RH_C2R4 POS_RH_C3R4 POS_RH_C4R4 POS_RH_C5R4 POS_RH_C6R4 */
                POS_LH_C6R5 POS_LH_C5R5 POS_LH_C4R5 POS_LH_C3R5 POS_LH_C2R5 POS_LH_C1R5    /* POS_RH_C1R5 POS_RH_C2R5 POS_RH_C3R5 POS_RH_C4R5 POS_RH_C5R5 POS_RH_C6R5 */
                POS_LH_C6R6 POS_LH_C5R6 POS_LH_C4R6 POS_LH_C3R6 POS_LH_C2R6                /*             POS_RH_C2R6 POS_RH_C3R6 POS_RH_C4R6 POS_RH_C5R6 POS_RH_C6R6 */
                                                        POS_LH_T1   POS_LH_T2   POS_LH_T3     POS_RH_T3   POS_RH_T2   POS_RH_T1
                                                        POS_LH_T4   POS_LH_T5   POS_LH_T6     POS_RH_T6   POS_RH_T5   POS_RH_T4
            >;
            hold-trigger-on-release;
        };
        tht: thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "thumb_hold_tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1         &kp F2      &kp F3      &kp F4       &kp F5                                                  /* */                                            &kp F6       &kp F7       &kp F8      &kp F9         &kp F10
            &kp EQUAL      &kp N1      &kp N2      &kp N3       &kp N4       &kp N5                                     /* */                                    &kp N6  &kp N7       &kp N8       &kp N9      &kp N0         &kp MINUS
            &kp TAB        &lht LCMD A &lht LALT S &lht LCTRL D &lht LSHFT F &kp T                                      /* */                                    &kp Y   &kp U        &kp I        &kp O       &kp P          &kp BSLH
            &kp ESC        &kp A       &kp S       &kp D        &kp F        &kp G                                      /* */                                    &kp H   &rht LSHFT J &rht LCTRL K &rht LALT L &rht LCMD SEMI &kp SQT
            &kp GRAVE      &kp Z       &kp X       &kp C        &kp V        &kp B &kp LSHFT        &kp LCTRL &layer_td /* */ &kp LGUI &kp RCTRL &kp RSHFT       &kp N   &kp M        &kp COMMA    &kp DOT     &kp FSLH       &kp PG_UP
            &magic MAGIC 0 &kp HOME    &kp END     &kp LEFT     &kp RIGHT          &tht LCTRL SPACE &kp RET   &kp LALT  /* */ &kp LALT &kp DEL   &tht LSHFT BSPC         &kp UP       &kp DOWN     &kp LBKT    &kp RBKT       &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN &kp C_BRI_UP &kp C_PREV &kp C_NEXT &kp C_PP                                      /* */                                &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans       &none        &none      &none      &none     &kp HOME                            /* */                      &kp LPAR  &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans       &none        &none      &kp UP     &none     &kp END                             /* */                      &kp RPAR  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans       &none        &kp LEFT   &kp DOWN   &kp RIGHT &kp PG_UP                           /* */                      &kp PRCNT &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans       &kp K_CMENU  &none      &kp F11    &kp F12   &kp PG_DN &trans &trans &to DEFAULT /* */ &trans &trans &trans &kp COMMA &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans       &kp CAPS     &kp INS    &kp F11    &kp F12             &trans &trans &trans      /* */ &trans &trans &trans           &kp KP_N0  &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR  &none           &none           &none           &none                                                    /* */                         &none &none &none &none &bt BT_CLR_ALL
            &none       &none           &none           &none           &none           &none                                    /* */                   &none &none &none &none &none &none
            &none       &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                          /* */                   &none &none &none &none &none &none
            &bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                          /* */                   &none &none &none &none &none &bootloader
            &sys_reset  &none           &none           &none           &none           &none           &bt_2 &bt_3 &none        /* */ &none &none &none &none &none &none &none &none &sys_reset
            &none       &none           &none           &none           &none                           &bt_0 &bt_1 &out OUT_USB /* */ &none &none &none       &none &none &none &none &none
            >;
        };
    };
};